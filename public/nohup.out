
> seven_brackets@1.0.0 start /var/www/seven_brackets
> node server.js

Fri, 02 Mar 2018 13:34:21 GMT sequelize deprecated String based operators are now deprecated. Please use Symbol based operators for better security, read more at http://docs.sequelizejs.com/manual/tutorial/querying.html#operators at node_modules/sequelize/lib/sequelize.js:242:13
Executing (default): CREATE TABLE IF NOT EXISTS `Allies` (`id` INTEGER NOT NULL auto_increment , `Ally1` INTEGER NOT NULL, `Ally2` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Allies` FROM `w3cebsgum5p7xrdx`
Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `categoryName` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Categories` FROM `w3cebsgum5p7xrdx`
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `userName` VARCHAR(255) NOT NULL, `rating` DECIMAL(3,2), `fbtoken` VARCHAR(255) NOT NULL, `img_url` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Users` FROM `w3cebsgum5p7xrdx`
Executing (default): CREATE TABLE IF NOT EXISTS `Threads` (`id` INTEGER NOT NULL auto_increment , `body` TEXT NOT NULL, `solved` TINYINT(1) NOT NULL DEFAULT false, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, `UserId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`UserId`) REFERENCES `Users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Threads` FROM `w3cebsgum5p7xrdx`
Executing (default): CREATE TABLE IF NOT EXISTS `Replies` (`id` INTEGER NOT NULL auto_increment , `body` TEXT NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `UserId` INTEGER NOT NULL, `ThreadId` INTEGER NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`UserId`) REFERENCES `Users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, FOREIGN KEY (`ThreadId`) REFERENCES `Threads` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Replies` FROM `w3cebsgum5p7xrdx`
App listening on PORT 80
/threads get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId`;
/threads get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId`;
/api/threads/1 get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId` WHERE `Thread`.`CategoryId` = '1';
/api/threads/2 get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId` WHERE `Thread`.`CategoryId` = '2';
/api/threads/3 get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId` WHERE `Thread`.`CategoryId` = '3';
/threads get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId`;
/threads get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId`;
/threads get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId`;
/threads get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId`;
/threads get request received
Executing (default): SELECT `Thread`.`id`, `Thread`.`body`, `Thread`.`solved`, `Thread`.`createdAt`, `Thread`.`updatedAt`, `Thread`.`CategoryId`, `Thread`.`UserId`, `User`.`id` AS `User.id`, `User`.`userName` AS `User.userName`, `User`.`rating` AS `User.rating`, `User`.`fbtoken` AS `User.fbtoken`, `User`.`img_url` AS `User.img_url`, `User`.`createdAt` AS `User.createdAt`, `User`.`updatedAt` AS `User.updatedAt`, `Replies`.`id` AS `Replies.id`, `Replies`.`body` AS `Replies.body`, `Replies`.`createdAt` AS `Replies.createdAt`, `Replies`.`updatedAt` AS `Replies.updatedAt`, `Replies`.`UserId` AS `Replies.UserId`, `Replies`.`ThreadId` AS `Replies.ThreadId` FROM `Threads` AS `Thread` LEFT OUTER JOIN `Users` AS `User` ON `Thread`.`UserId` = `User`.`id` LEFT OUTER JOIN `Replies` AS `Replies` ON `Thread`.`id` = `Replies`.`ThreadId`;
Terminated
npm ERR! code ELIFECYCLE
npm ERR! errno 143
npm ERR! seven_brackets@1.0.0 start: `node server.js`
npm ERR! Exit status 143
npm ERR! 
npm ERR! Failed at the seven_brackets@1.0.0 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /root/.npm/_logs/2018-03-02T13_38_46_919Z-debug.log
